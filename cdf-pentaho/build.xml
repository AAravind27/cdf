<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See common_build.xml for more details
============================================================================-->
<project name="Community Dashboard Framework" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant" >

  <description>
    This build file is used to create the Dashboard project and works with the common_build.xml file.
  </description>

  <property file="../override.properties"
            description="Top level Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="../build.properties"
            description="Top level Properties customized for your particular project belong in this file." />

  <!-- Import subfloor.xml which contains all the default tasks -->
  <import file="../build-res/subfloor-pkg.xml" id="subfloor"/>

  <!-- Global properties -->

  <property name='CLIENT' value='cdf/js' />
  <property name="resources.properties.name" value="resources.properties" />
  <property name="resources.legacy.properties.name" value="resources.legacy.properties" />
  <property name="resources.blueprint.properties.name" value="resources.blueprint.properties" />
  <property name="resources.blueprint.legacy.properties.name" value="resources.blueprint.legacy.properties" />
  <property name="resources.bootstrap.properties.name" value="resources.bootstrap.properties" />
  <property name="resources.bootstrap.legacy.properties.name" value="resources.bootstrap.legacy.properties" />
  <property name="resources.cdf.dashboards.properties.name" value="resources.cdf.dashboards.properties" />
  <property name="resources.cdf.dashboards.legacy.properties.name" value="resources.cdf.dashboards.legacy.properties" />

  <property name="resource.dir" value="resource" description="Name of the resource directory"/>
  <property name="runtimelib.dir" value="${basedir}/runtime-lib"
            description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)" />
  <property name='core.dir' value='../cdf-core' description="Name of core dir"/>
  <property name='core-js.dir' value='${core.dir}/${CLIENT}'/>
  <property name='core-js-lib.dir' value='${core.dir}/cdf/js-lib'/>

  <property name='cdf-core-lib-require-js-cfg.name' value='cdf-core-lib-require-js-cfg.js'/>

  <property name='core-resource.dir' value='${core.dir}/${resource.dir}'/>
  <property name='pentaho-base.dir' value='../cdf-pentaho-base' description="Name of pentaho base dir"/>
  <property name='pentaho-base-resource.dir' value='${pentaho-base.dir}/${resource.dir}'/>
  <property name='pentaho-base-src.dir' value='${pentaho-base.dir}/src'/>
  <property name='pentaho-base-js.dir' value='${pentaho-base.dir}/${CLIENT}'/>
  <property name="plugin.name" value="pentaho-cdf" description="Name of the plugin" />
  <property name="bin.dir" value="bin" />
  <property name="resource.dir" value="resource" description="Name of the resource directory" />
  <property name="stage.dir" value="${bin.dir}/stage" description="Name of the resource directory" />
  <property name="samples.stage.dir" value="${bin.dir}/stage-samples" description="Name of the stage samples directory" />
  <property name="solution.stage.dir" value="${bin.dir}/stage-solution" description="Name of the stage solution directory" />
  <property name="plugin.local.install.solutions.dir" value="solution" />
  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${project.revision}.zip"/>
  <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${project.revision}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${project.revision}.zip"/>

  <property name='stage-resources.path' value='${stage.dir}/${plugin.name}/${resources.properties.name}'/>
  <property name='core-resources.path' value='${core-resource.dir}/${resources.properties.name}'/>

  <property name='base-resources.path' value='${pentaho-base-resource.dir}/${resources.properties.name}'/>
  <property name='resources.path' value='${resource.dir}/${resources.properties.name}'/>

  <import file="../build-res/subfloor-js.xml"/>

  <mkdir dir="${js.module.script.dir}"/>
  <mkdir dir="${js.module.script.agg.dir}"/>

  <!--
    AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
    THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
    FOUND IN common_build.xml.
  -->


  <path id="classpath">
    <fileset dir="${devlib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${runtimelib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath" />
      </classpath>
      <src path="${src.dir}" />
      <src path="${pentaho-base-src.dir}"/>
    </javac>
  </target>

  <target name="dist" depends="clean-dist,resolve,resolve-js,jar,dist-plugin,dist-solution,dist-samples,dist-js"/>

  <target name="dist-compile" depends="clean-dist,jar,dist-plugin"/>

  <!-- overrides subfloor clean to also cleanup runtime-lib -->
  <target name="clean" depends="subfloor.clean, subfloor-js.clean-js">
    <delete dir="${runtimelib.dir}" verbose="true"/>
    <delete dir="${dist.dir}" verbose="true"/>
    <delete dir="${package.resdir}" verbose="true"/>
    <delete dir="build-res" verbose="true"/>
  </target>

    <!--=======================================================================
      dist

      Creates a distribution of this project's plugin zip
      ====================================================================-->

  <target name="make-stage">
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${stage.dir}/${plugin.name}/lib"/>
    <mkdir dir="${stage.dir}/${plugin.name}/resources"/>

    <mkdir dir="${stage.dir}/${plugin.name}/actions" />
  </target>

  <target name="clean-bin-dir">
    <!-- delete and re-create the plugin dist folder tree -->
    <delete dir="${bin.dir}"/>
  </target>

  <target name="dist-plugin" depends="jar,make-stage,clean-bin-dir" description="Creates a distribution">

    <!-- Copy core resources -->
    <copy todir='${stage.dir}/${plugin.name}'>
      <fileset dir='${core-resource.dir}'>
        <exclude name="${resources.properties.name}"/>
        <exclude name="${resources.legacy.properties.name}"/>
        <exclude name="${resources.blueprint.legacy.properties.name}"/>
        <exclude name="${resources.bootstrap.legacy.properties.name}"/>
        <exclude name="${resources.cdf.dashboards.legacy.properties.name}"/>
        <exclude name="template-dashboard-require.html"/>
      </fileset>
    </copy>

    <!-- Copy core js-lib -->
    <copy todir='${stage.dir}/${plugin.name}/js'>
      <fileset dir='${core-js-lib.dir}'>
        <exclude name="${cdf-core-lib-require-js-cfg.name}"/>
        <exclude name="cdf.css"/>
      </fileset>
    </copy>
    <!-- Copy core js, temporarily replace cdf.css -->
    <copy todir='${stage.dir}/${plugin.name}/js'>
      <fileset dir='${core-js.dir}'>
        <exclude name="cdf.legacy.css"/>
        <exclude name="lib/**/*"/>
      </fileset>
    </copy>
    <!-- Copy core js legacy libs -->
    <copy todir='${stage.dir}/${plugin.name}/js' overwrite="true">
      <fileset dir='${core-js.dir}/lib'>
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy pentaho-base js -->
    <copy todir='${stage.dir}/${plugin.name}/js'>
      <fileset dir='${pentaho-base-js.dir}'/>
    </copy>

    <antcall target="replace-static-resource-labels">
      <param name="base.js.path" value="${stage.dir}/${plugin.name}/js" />
    </antcall>

    <!-- copy the plugin jar to the plugin dist lib folder -->
    <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
     <fileset dir="${dist.dir}">
       <include name="${ivy.artifact.id}-${project.revision}.jar" />
     </fileset>
     <fileset dir="${runtimelib.dir}">
       <include name="*.jar" />
     </fileset>
     <fileset dir="${devlib.dir}">
       <include name="*.jar" />
     </fileset>
    </copy>

    <!-- Copy the plugin.xml and any other files from the resource dir -->
    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
     <fileset dir="${resource.dir}">
       <include name="**/*" />
       <exclude name="${resources.properties.name}"/>
     </fileset>
    </copy>

    <!-- copy over all the xactions within the cdf folder -->
    <copy todir="${stage.dir}/${plugin.name}/actions" overwrite="true" >
    <fileset dir="solution/cdf/components">
      <include name="*.xaction*"/>
      <include name="*.xml"/>
      <include name="*.js"/>
      <exclude name="index.xml"/>
    </fileset>
    </copy>

    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
     <fileset dir="${basedir}">
       <include name="readme.txt"/>
     </fileset>
    </copy>

    <!-- create the version file -->
    <tstamp/>
    <property name="sequential.build.id" value="manual-${DSTAMP}"/>

    <echo file="${stage.dir}/${plugin.name}/version.xml"
          message="&lt;version branch='${project.stage}' buildId='${sequential.build.id}'>${project.revision}&lt;/version>"/>

    <!-- Copy js folder into dist -->
    <copy todir="${stage.dir}/${plugin.name}/js" overwrite="true">
      <fileset dir="cdf/js">
        <include name="**/*"/>
      </fileset>
    </copy>

    <antcall target="write-properties" />

    <echo message="Extracting CCC JavaScript from Dependencies"/>
    <unzip dest="${js.expanded.lib.dir}" overwrite="true">
      <fileset dir=".">
        <include name="${js.lib.dir}/ccc-*.zip"/>
      </fileset>
    </unzip>

    <!-- copy ccc build -->
    <copy todir="${stage.dir}/${plugin.name}/js/lib/CCC" >
      <fileset dir="${js.expanded.lib.dir}/ccc/ccc"/>
    </copy>

    <!-- rename ccc files -->
    <move file="${stage.dir}/${plugin.name}/js/lib/CCC/pvc.js" tofile="${stage.dir}/${plugin.name}/js/lib/CCC/pvc-d1.0.js"/>

    <!-- blank out the AMD module as the Shim configuration is used at runtime instead -->
    <echo message="" file="${stage.dir}/${plugin.name}/js/cdf-module.js"/>

    <replace file="${stage.dir}/${plugin.name}/resources/languages/messages.properties" token="Version 4.0" value="Version ${project.revision}"/>
    <replace file="${stage.dir}/${plugin.name}/resources/languages/messages_en.properties" token="Version 4.0" value="Version ${project.revision}"/>
    <replace file="${stage.dir}/${plugin.name}/resources/languages/messages_hr.properties" token="Version 4.0" value="Version ${project.revision}"/>
    <replace file="${stage.dir}/${plugin.name}/resources/languages/messages_it.properties" token="Version 4.0" value="Version ${project.revision}"/>


    <echo file="${stage.dir}/${plugin.name}/version.xml"
          message="&lt;version branch='${project.stage}' buildId='${sequential.build.id}'>${project.revision}&lt;/version>"/>

    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.zipfile}"
         basedir="${stage.dir}"
         includes="pentaho-cdf/**/*"
         excludes="**/Thumbs.db" />


    <echo file="${dist.dir}/marketplace.xml">
      &lt;version&gt;
        &lt;branch&gt;${project.stage}&lt;/branch&gt;
        &lt;version&gt;${project.revision}&lt;/version&gt;
        &lt;name&gt;${marketplace.metadata.name}&lt;/name&gt;
        &lt;package_url&gt;
          ${marketplace.metadata.package_url.4.8}
        &lt;/package_url&gt;
        &lt;samples_url&gt;
          ${marketplace.metadata.samples_url.4.8}
        &lt;/samples_url&gt;
        &lt;description&gt;
          ${marketplace.metadata.description.4.8}
        &lt;/description&gt;
        &lt;build_id&gt;${sequential.build.id}&lt;/build_id&gt;
        &lt;min_parent_version&gt;${marketplace.metadata.min_parent_version.4.8}&lt;/min_parent_version&gt;
        &lt;max_parent_version&gt;${marketplace.metadata.max_parent_version.4.8}&lt;/max_parent_version&gt;
        &lt;development_stage&gt;
          &lt;lane&gt;${marketplace.metadata.development_stage.lane}&lt;/lane&gt;
          &lt;phase&gt;${marketplace.metadata.development_stage.phase}&lt;/phase&gt;
        &lt;/development_stage&gt;
      &lt;/version&gt;</echo>

  </target>

  <target name="dist-js" >
    <mkdir dir="${bin.dir}/js-source/${js.module.script.namespace}"/>

    <!-- Copy core js-lib -->
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}">
      <fileset dir='${core-js-lib.dir}'>
        <exclude name="${cdf-core-lib-require-js-cfg.name}"/>
        <exclude name="cdf.css"/>
      </fileset>
    </copy>
    <!-- cdf-core/cdf/js -->
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}" overwrite="true">
      <fileset dir='${core-js.dir}'>
        <exclude name="cdf.css"/>
        <exclude name="lib/**/*"/>
      </fileset>
    </copy>
    <!-- Copy cdf-core/cdf/js/lib (legacy libs) -->
    <copy todir='${stage.dir}/${plugin.name}/js'>
      <fileset dir='${core-js.dir}/lib'>
        <include name="**/**/*"/>
      </fileset>
    </copy>

    <!-- cdf-pentaho-base/cdf/js -->
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}" overwrite="true">
      <fileset dir='${pentaho-base-js.dir}'>
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- cdf-pentaho/cdf/js -->
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}" overwrite="true">
      <fileset dir='${CLIENT}'>
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- cdf-pentaho-base/cdf/js -->
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}" overwrite="true">
      <fileset dir='${pentaho-base-js.dir}'>
        <include name="**/*"/>
      </fileset>
    </copy>

    <echo message="Extracting CCC JavaScript from Dependencies"/>
    <unzip dest="${js.expanded.lib.dir}" overwrite="true">
      <fileset dir=".">
        <include name="${js.lib.dir}/ccc-*.zip"/>
      </fileset>
    </unzip>

    <!-- copy ccc build -->
    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}/lib/CCC" >
        <fileset dir="${js.expanded.lib.dir}/ccc/ccc"/>
    </copy>

    <!-- rename ccc files -->
    <move file="${bin.dir}/js-source/${js.module.script.namespace}/lib/CCC/pvc.js"
          tofile="${bin.dir}/js-source/${js.module.script.namespace}/lib/CCC/pvc-d1.0.js"/>

    <antcall target="replace-static-resource-labels">
      <param name="base.js.path" value="${bin.dir}/js-source" />
    </antcall>

    <zip destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-js.zip">
      <zipfileset dir="${bin.dir}/js-source" includes="**/*"/>
    </zip>
  </target>


     <!--=======================================================================
      install-plugin

      Installs the plugin locally
      ====================================================================-->
  <target name="install-plugin" depends="dist" description="Installs the plugin locally in solution/system/pentaho-cdf">

    <echo>Installing plugin in ${plugin.local.install.solutions.dir}/system/${plugin.name}</echo>
    <fail message="plugin.local.install.solutions.dir not set - cannot copy" unless="plugin.local.install.solutions.dir"/>

    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <!-- Copy plugin -->
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*" />
      </fileset>
    </copy>

<!-- Copy solution
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}/actions">
      <fileset dir="${solution.stage.dir}/cdf/components">
        <include name="**/*" />
      </fileset>
    </copy>
-->

    <!-- Copy samples -->
    <copy todir="${plugin.local.install.solutions.dir}/plugin-samples">
      <fileset dir="${samples.stage.dir}/plugin-samples">
        <include name="**/*" />
      </fileset>
    </copy>


    <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}"
         dest="${stage.dir}/blah.html"/>

  </target>

  <target name="dist-samples" depends="init">

    <mkdir dir="${samples.stage.dir}"/>

    <!-- copy over all the xactions within the pentaho-cdf folder -->
    <copy todir="${samples.stage.dir}/plugin-samples" overwrite="true" >
      <fileset dir="solution/plugin-samples"></fileset>
    </copy>

    <zip zipfile="${dist.dir}/${plugin.samples.zipfile}"
         basedir="${samples.stage.dir}/plugin-samples"
         includes="**/*"
         excludes="**/Thumbs.db"/>
  </target>

  <target name="dist-solution" depends="init">

    <!-- copy over all the xactions within the cdf folder -->
<!--
    <mkdir dir="${solution.stage.dir}"/>
    <copy todir="${solution.stage.dir}" overwrite="true" >
      <fileset dir="solution">
        <include name="cdf/**/*.xaction*"/>
        <include name="cdf/**/*.xml"/>
        <include name="cdf/**/*.js"/>
        <exclude name="cdf/**/index.xml"/>
      </fileset>
    </copy>

    <zip zipfile="${dist.dir}/${plugin.solution.zipfile}"
         basedir="${solution.stage.dir}"
         includes="**/*"
         excludes="**/Thumbs.db"/>
-->
  </target>


    <!--=======================================================================
    publish-pentaho-nojar (override)

    Publishes the jar and plugin zip package to the Maven repository
    ====================================================================-->
  <target name="publish-pentaho-nojar" depends="install-antcontrib,create-pom,ivy.deliver, subfloor-js.js.publish-nojar">
    <ant antfile="common_build.xml" target="publish-pentaho-nojar" />

    <ivy:makepom ivyfile="package-ivy.xml" pomfile="plugin-pom.xml" />
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="samples-pom.xml" />
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="solution-pom.xml" />

    <replace file="plugin-pom.xml" token="jar" value="zip" />
    <replace file="plugin-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}" />
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="plugin-pom.xml" />
      <param name="publish.file" value="${dist.dir}/${plugin.zipfile}" />
    </antcall>

    <replace file="samples-pom.xml" token="jar" value="zip" />
    <replace file="samples-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-samples" />
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="samples-pom.xml" />
      <param name="publish.file" value="${dist.dir}/${plugin.samples.zipfile}" />
    </antcall>

<!--
    <replace file="solution-pom.xml" token="jar" value="zip" />
    <replace file="solution-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-solution" />
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="solution-pom.xml" />
      <param name="publish.file" value="${dist.dir}/${plugin.solution.zipfile}" />
    </antcall>
-->
  </target>

  <target name="resolve" depends="resolve-default, resolve-test, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />

  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="${ivyfile}" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="runtime-lib/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="minify-client">
    <concat destfile="${CLIENT}/scripts.js">
      <filelist dir='${CLIENT}' files='${scripts}'/>
    </concat>
    <concat destfile="${CLIENT}/styles.css">
      <filelist dir='${CLIENT}' files='${styles}'/>
    </concat>
    <yui-compressor warn="false"
                    munge="false"
                    preserveallsemicolons="false"
                    fromdir="${CLIENT}"
                    todir="${CLIENT}/mini/">

      <include name="scripts.js" />
    </yui-compressor>

    <yui-compressor warn="false"
                    preserveallsemicolons="false"
                    fromdir="${CLIENT}"
                    todir="${CLIENT}/mini">

      <include name="styles.css" />
    </yui-compressor>
    <checksum file='${CLIENT}/mini/scripts-min.js' algorithm='md5' property='scriptsMD5'/>
    <checksum file='${CLIENT}/mini/styles-min.css' algorithm='md5' property='stylesMD5'/>
    <copy file='${CLIENT}/mini/scripts-min.js' tofile='${CLIENT}/js/${scriptsMD5}.js' />
    <copy file='${CLIENT}/mini/styles-min.css' tofile='${CLIENT}/css/${stylesMD5}.css' />
    <property name='versions.file' value='resource/versions.properties'/>
    <echo file='${versions.file}' append='false'/>
    <echo file='${versions.file}' append='true'>scripts.file: js/${scriptsMD5}.js&#13;&#10;</echo>
    <echo file='${versions.file}' append='true'>styles.file: css/${stylesMD5}.css&#13;&#10;</echo>
  </target>

  <target name="write-resources">
    <!-- cdf-core/resource/resources.properties -->
    <property file="${core-resources.path}"/>
    <!-- cdf-pentaho-base/resource/resources.properties -->
    <property file="${base-resources.path}"/>
    <!-- cdf-pentaho/resource/resources.properties -->
    <property file="${resources.path}"/>

    <!-- JS files need to maintain the original order -->
    <!-- cdf-core property core-scripts-1 -->
    <for list='${core-scripts-1}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-core property core-scripts-2 -->
    <for list='${core-scripts-2}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-pentaho property pentaho-scripts-1 -->
    <for list='${pentaho-scripts-1}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-core property core-scripts-3 -->
    <for list='${core-scripts-3}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-pentaho-base property pentaho-base-scripts -->
    <for list='${pentaho-base-scripts}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-pentaho property pentaho-scripts-2 -->
    <for list='${pentaho-scripts-2}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="script" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>

    <!-- CSS files have no order enforced -->
    <!-- cdf-core property core-styles -->
    <for list='${core-styles}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="link" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-pentaho-base property pentaho-base-styles -->
    <for list='${pentaho-base-styles}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
            <entry key="link" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
    <!-- cdf-pentaho property pentaho-styles -->
    <for list='${pentaho-styles}' param='filename'>
      <sequential>
        <propertyfile file="${stage-resources.path}">
          <entry key="link" operation="+" value="@{filename},"/>
        </propertyfile>
      </sequential>
    </for>
  </target>

  <target name="write-properties" depends="write-resources,make-stage" />

  <target name="replace-static-resource-labels">

    <property file="${basedir}/build.properties"/>
    <property name="base.js.path" value=""/>

    <!-- modifications needed for core-refator components/ccc.js -->
    <replace file="${base.js.path}/components/ccc.js" token="@CDF_CCC_REQUIRE_HEADER@" value="${cdf.ccc.require.header}" />
    <replace file="${base.js.path}/components/ccc.js" token="@CDF_CCC_PUBLISHED_GLOBALLY@" value="${cdf.ccc.published.globally}" />
    <replace file="${base.js.path}/components/ccc.js" token="@CDF_CCC_VAR_DECLARATION@" value="${cdf.ccc.var.declaration}" />
    <replace file="${base.js.path}/components/ccc.js" token="@CDF_CCC_REQUIRE_FOOTER@" value="${cdf.ccc.require.footer}" />

  </target>
  
  
  <!-- Disabling publish for 4.8 codeline -->
    <target name="publish" depends="dist, dist-source">
  </target>

</project>
