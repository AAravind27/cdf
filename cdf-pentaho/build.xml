<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See common_build.xml for more details
============================================================================-->
<project name="Community Dashboard Framework" basedir="." default="jar" xmlns:ivy="antlib:org.apache.ivy.ant" >

	<description>
		This build file is used to create the Dashboard project and works with the common_build.xml file.
	</description>

	<!--Include the ant-contrib tasks-->

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="dev-lib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>

	<!-- Define the Sonar task if this hasn't been done in a common script -->
	<taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
	    <classpath path="sonar-ant-task-1.3.jar" />
	</taskdef>


  
   <property file="../override.properties"
            description="Top level Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="../build.properties"
            description="Top level Properties customized for your particular project belong in this file." />


  <!-- Import subfloor.xml which contains all the default tasks -->
  <import file="../build-res/subfloor-pkg.xml" id="subfloor"/>


 	
	<!-- Global properties -->
	
	<property name='CLIENT' value='cdf/js' />
	<property name="includes.name" value="resources.properties"/>
	<property name="resource.dir" value="resource" description="Name of the resource directory"/>
  	<property name="runtimelib.dir" value="${basedir}/runtime-lib" 
  		      description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)" />
  	<property name='pentaho-base.dir' value='../cdf-pentaho-base' description="Name of pentaho base dir"/>
    <property name='core.dir' value='../cdf-core' description="Name of core dir"/>
	<property name='core-js.dir' value='${core.dir}/${CLIENT}'/>
	<property name='core-resource.dir' value='${core.dir}/${resource.dir}'/>
    <property name='pentaho-base-resource.dir' value='${pentaho-base.dir}/${resource.dir}'/>
    <property name='pentaho-base-src.dir' value='${pentaho-base.dir}/src'/>
  	<property name="plugin.name" value="pentaho-cdf" description="Name of the plugin" />
	<property name="bin.dir" value="bin" />
	<property name="resource.dir" value="resource" description="Name of the resource directory" />
	<property name="stage.dir" value="${bin.dir}/stage" description="Name of the resource directory" />
	<property name="samples.stage.dir" value="${bin.dir}/stage-samples" description="Name of the stage samples directory" />
	<property name="solution.stage.dir" value="${bin.dir}/stage-solution" description="Name of the stage solution directory" />
	<property name="plugin.local.install.solutions.dir" value="solution" />
	<property name="plugin.artifact.id" value="${plugin.name}"/>
	<property name="plugin.zipfile" value="${plugin.artifact.id}-${project.revision}.zip"/>
	<property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${project.revision}.zip"/>
	<property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${project.revision}.zip"/>

    <import file="../build-res/subfloor-js.xml"/>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    --> 


	<path id="classpath">
		 <fileset dir="${devlib.dir}">
		      <include name="**/*.jar" />
		</fileset>
		<fileset dir="${lib.dir}">
		  	<include name="**/*.jar" />
		</fileset>
		<fileset dir="${runtimelib.dir}">
		      <include name="**/*.jar" />
		</fileset>
	</path>

	<target name="compile.compile" depends="init" description="Performs the actual javac compile">
		  <javac destdir="${classes.dir}"
			  debug="${javac.debug}"
			  deprecation="${javac.deprecation}"
			  fork="true"
			  source="${javac.source}"
			  target="${javac.target}">
			  <classpath>
				  <path refid="classpath" />
			  </classpath>
			  <src path="${src.dir}" />
			  <src path="${pentaho-base-src.dir}"/>
		  </javac>
	</target>

	<target name="dist" depends="clean-dist,resolve,jar,dist-plugin,dist-solution,dist-samples,dist-js"/>

	<target name="dist-compile" depends="clean-dist,jar,dist-plugin"/>
	  
	<target name="check-sonar-props">
      	<available file="/home/tomcat/sonar.properties" property="sonar.props"/>    
      	<echo>${sonar.props}</echo>
	</target>

	<target name="read-sonar-props" depends="check-sonar-props" if="sonar.props">
		<echo>Prop file exists</echo>
		<loadproperties srcFile="/home/tomcat/sonar.properties"/>
	</target>
 
	<target name="sonar" depends='read-sonar-props'>
	    <!-- list of mandatories Sonar properties -->
	    <property name="sonar.sources" value="${src.dir}" />
	    <!-- list of optional Sonar properties -->
	    <property name="sonar.binaries" value="${classes.dir}" />
	    <sonar:sonar key="pt.webdetails:CDF" version="${project.revision}" xmlns:sonar="antlib:org.sonar.ant"/>
	</target>

	<target name="sonar-js" depends="read-sonar-props">
	   	<property name="sonar.language" value="js"/>
	    <property name="sonar.dynamicAnalysis" value="false"/>
	    <property name="sonar.sources" value="cdf/js" />
	    <sonar:sonar key="pt.webdetails:CDF-js" version="${project.revision}" xmlns:sonar="antlib:org.sonar.ant"/> 
	</target>


	<!-- overrides subfloor clean to also cleanup runtime-lib -->
	<target name="clean" depends="subfloor.clean">
		<delete dir="${runtimelib.dir}" />
	</target>

	  <!--=======================================================================
			dist

			Creates a distribution of this project's plugin zip
			====================================================================-->
	<target name="dist-plugin" depends="jar" description="Creates a distribution">

		<!-- delete and re-create the plugin dist folder tree -->
	    <delete dir="${bin.dir}"/>

	    <mkdir dir="${stage.dir}" />
	    <mkdir dir="${stage.dir}/${plugin.name}" />
	    <mkdir dir="${stage.dir}/${plugin.name}/lib" />

		<mkdir dir="${stage.dir}/${plugin.name}/actions" />
	

		<!-- Copy core resources -->
        <copy todir='${stage.dir}/${plugin.name}'>
            <fileset dir='${core-resource.dir}'>
                <exclude name="${includes.name}"/>
            </fileset>
        </copy>

        <!-- Copy core js -->
        <copy todir='${stage.dir}/${plugin.name}/js'>
            <fileset dir='${core-js.dir}'>
                <exclude name="${includes.name}"/>
            </fileset>
        </copy>

		<antcall target="replace-static-resource-labels">
	    	<param name="base.js.path" value="${stage.dir}/${plugin.name}/js" />
	    </antcall>


		<!-- copy the plugin jar to the plugin dist lib folder -->
	    <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
		   <fileset dir="${dist.dir}">
			   <include name="${ivy.artifact.id}-${project.revision}.jar" />
		   </fileset>
		   <fileset dir="${runtimelib.dir}">
			   <include name="*.jar" />
		   </fileset>
		   <fileset dir="${devlib.dir}">
			   <include name="*.jar" />
		   </fileset>
	    </copy>

	    <!-- Copy the plugin.xml and any other files from the resource dir -->
	    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
		   <fileset dir="${resource.dir}">
			   <include name="**/*" />
		   </fileset>
	    </copy>

	   	  <!-- copy over all the xactions within the cdf folder -->
	    <copy todir="${stage.dir}/${plugin.name}/actions" overwrite="true" >
		  <fileset dir="solution/cdf/components">
			  <include name="*.xaction*"/>
			  <include name="*.xml"/>
			  <include name="*.js"/>
			  <exclude name="index.xml"/>
		  </fileset>
	    </copy>

	    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
		   <fileset dir="${basedir}">
			   <include name="readme.txt"/>
		   </fileset>
	    </copy>

	    <!-- create the version file -->
	    <tstamp/>			
		<property name="sequential.build.id" value="manual-${DSTAMP}"/>

	    <echo file="${stage.dir}/${plugin.name}/version.xml" message="&lt;version branch='${project.stage}' buildId='${sequential.build.id}'>${project.revision}&lt;/version>"/>		   

	    <!-- Copy js folder into dist -->
	    <copy todir="${stage.dir}/${plugin.name}/js" overwrite="true">
		   <fileset dir="cdf/js">
			   <include name="**/*" />
		   </fileset>
	    </copy>

    	<!-- blank out the AMD module as the Shim configuration is used at runtime instead -->
        <echo message="" file="${stage.dir}/${plugin.name}/js/cdf-module.js"/>		   
		
		<replace file="${stage.dir}/${plugin.name}/resources/languages/Messages.properties" token="Version 4.0" value="Version ${project.revision}"/> 
	    <replace file="${stage.dir}/${plugin.name}/resources/languages/Messages_en.properties" token="Version 4.0" value="Version ${project.revision}"/> 
	    <replace file="${stage.dir}/${plugin.name}/resources/languages/Messages_hr.properties" token="Version 4.0" value="Version ${project.revision}"/> 
	    <replace file="${stage.dir}/${plugin.name}/resources/languages/Messages_it.properties" token="Version 4.0" value="Version ${project.revision}"/> 

	    <!-- create a zip file -->
	    <zip zipfile="${dist.dir}/${plugin.zipfile}"
		   basedir="${stage.dir}"
		   includes="pentaho-cdf/**/*"
		   excludes="**/Thumbs.db" />


		<echo file="${dist.dir}/marketplace.xml">&lt;version>
		    &lt;branch>${project.stage}&lt;/branch>
			&lt;version>${project.revision}&lt;/version>
    		&lt;name>${marketplace.metadata.name}&lt;/name>
	        &lt;package_url>${marketplace.metadata.package_url}&lt;/package_url>
            &lt;samples_url>${marketplace.metadata.samples_url}&lt;/samples_url>
            &lt;description>${marketplace.metadata.description}&lt;/description>
		    &lt;build_id>${sequential.build.id}&lt;/build_id>
            &lt;min_parent_version>${marketplace.metadata.min_parent_version}&lt;/min_parent_version>		
	    	&lt;max_parent_version>${marketplace.metadata.max_parent_version}&lt;/max_parent_version>        
			&lt;/version>	</echo>         

	</target>


	<target name="dist-js" >    
		<mkdir dir="${bin.dir}/js-source/${js.module.script.namespace}"/>
	    
		<!-- cdf-core/cdf/js -->
	    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}" overwrite="true">
            <fileset dir='${core-js.dir}'>
            	<include name="**/*"/>
            </fileset>
	    </copy>

	    <!-- cdf-pentaho/cdf/js -->
	    <copy todir="${bin.dir}/js-source/${js.module.script.namespace}" overwrite="true">
            <fileset dir='${CLIENT}'>
            	<include name="**/*"/>
            </fileset>
	    </copy>

	    <antcall target="replace-static-resource-labels">
	    	<param name="base.js.path" value="${bin.dir}/js-source" />
	    </antcall>

	    <zip destfile="${dist.dir}/${ivy.artifact.id}-${project.revision}-js.zip">
	      <zipfileset dir="${bin.dir}/js-source" includes="**/*"/>
	    </zip>
  </target>


	   <!--=======================================================================
			install-plugin

			Installs the plugin locally
			====================================================================-->
	<target name="install-plugin" depends="dist" description="Installs the plugin locally in solution/system/pentaho-cdf">


		  <echo>Installing plugin in ${plugin.local.install.solutions.dir}/system/${plugin.name}</echo>
		  <fail message="plugin.local.install.solutions.dir not set - cannot copy" unless="plugin.local.install.solutions.dir"/>

		  <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
		  <!-- Copy plugin -->
		  <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
			  <fileset dir="${stage.dir}/${plugin.name}">
				  <include name="**/*" />
			  </fileset>
		  </copy>

		  <!-- Copy solution 
		  <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}/actions">
			  <fileset dir="${solution.stage.dir}/cdf/components">
				  <include name="**/*" />
</fileset>
</copy>
-->

		  <!-- Copy samples -->
		  <copy todir="${plugin.local.install.solutions.dir}/plugin-samples">
			  <fileset dir="${samples.stage.dir}/plugin-samples">
				  <include name="**/*" />
			  </fileset>
		  </copy>


		  <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}" dest="${stage.dir}/blah.html"/>

	</target>

	<target name="dist-samples" depends="init">

		  <mkdir dir="${samples.stage.dir}"/>

		  <!-- copy over all the xactions within the pentaho-cdf folder -->
		  <copy todir="${samples.stage.dir}/plugin-samples" overwrite="true" >
			  <fileset dir="solution/plugin-samples"></fileset>
		  </copy>

		  <zip zipfile="${dist.dir}/${plugin.samples.zipfile}"
			  basedir="${samples.stage.dir}/plugin-samples"
			  includes="**/*"
			  excludes="**/Thumbs.db" 
			  />
	</target>

	<target name="dist-solution" depends="init">

		  <!-- copy over all the xactions within the cdf folder -->
<!--
		  		  <mkdir dir="${solution.stage.dir}"/>
				  			  		  <copy todir="${solution.stage.dir}" overwrite="true" >
			  <fileset dir="solution">
				  <include name="cdf/**/*.xaction*"/>
				  <include name="cdf/**/*.xml"/>
				  <include name="cdf/**/*.js"/>
				  <exclude name="cdf/**/index.xml"/>
</fileset>
</copy>

		  <zip zipfile="${dist.dir}/${plugin.solution.zipfile}"
basedir="${solution.stage.dir}"
includes="**/*"
excludes="**/Thumbs.db" 
			  />
			  -->
	</target>


	  <!--=======================================================================
		publish-pentaho-nojar (override)

		Publishes the jar and plugin zip package to the Maven repository
		====================================================================-->
	<target name="publish-pentaho-nojar" depends="install-antcontrib,create-pom,ivy.deliver, subfloor-js.js.publish-nojar">
		<ant antfile="common_build.xml" target="publish-pentaho-nojar" />

		<ivy:makepom ivyfile="package-ivy.xml" pomfile="plugin-pom.xml" />
		<ivy:makepom ivyfile="package-ivy.xml" pomfile="samples-pom.xml" />
		<ivy:makepom ivyfile="package-ivy.xml" pomfile="solution-pom.xml" />

		<replace file="plugin-pom.xml" token="jar" value="zip" />
		<replace file="plugin-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}" />
		<antcall target="maven-publish-artifact">
			<param name="publish.pomFile" value="plugin-pom.xml" />
			<param name="publish.file" value="${dist.dir}/${plugin.zipfile}" />
		</antcall>

		<replace file="samples-pom.xml" token="jar" value="zip" />
		<replace file="samples-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-samples" />
		<antcall target="maven-publish-artifact">
			<param name="publish.pomFile" value="samples-pom.xml" />
			<param name="publish.file" value="${dist.dir}/${plugin.samples.zipfile}" />
		</antcall>

		  <!--
		  <replace file="solution-pom.xml" token="jar" value="zip" />
		  <replace file="solution-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-solution" />
		  <antcall target="maven-publish-artifact">
			  <param name="publish.pomFile" value="solution-pom.xml" />
			  <param name="publish.file" value="${dist.dir}/${plugin.solution.zipfile}" />
		  </antcall>
	-->	  
	</target>

  	<target name="resolve" depends="resolve-default, resolve-test, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />

    <target name="resolve-runtime" depends="resolve-init">
    	<ivy:resolve file="${ivyfile}" conf="runtime" />
    	<ivy:retrieve conf="runtime" pattern="runtime-lib/[module]-[revision](-[classifier]).[ext]" />
    </target>

  	<target name="minify-client">
	  	<concat destfile="${CLIENT}/scripts.js">
		  	<filelist dir='${CLIENT}' files='${scripts}'/>
	  	</concat>
	  	<concat destfile="${CLIENT}/styles.css">
		  	<filelist dir='${CLIENT}' files='${styles}'/>
	  	</concat>
	  	<yui-compressor 
		  	warn="false" 
		  	munge="false" 
		  	preserveallsemicolons="false" 
		  	fromdir="${CLIENT}" 
		  	todir="${CLIENT}/mini/">

			<include name="scripts.js" />
		</yui-compressor>
	
		<yui-compressor 
		  	warn="false" 
		  	preserveallsemicolons="false" 
		  	fromdir="${CLIENT}" 
		  	todir="${CLIENT}/mini">

		  	<include name="styles.css" />
	  	</yui-compressor>
	    <checksum file='${CLIENT}/mini/scripts-min.js' algorithm='md5' property='scriptsMD5'/>
	    <checksum file='${CLIENT}/mini/styles-min.css' algorithm='md5' property='stylesMD5'/>
	    <copy file='${CLIENT}/mini/scripts-min.js' tofile='${CLIENT}/js/${scriptsMD5}.js' />
	    <copy file='${CLIENT}/mini/styles-min.css' tofile='${CLIENT}/css/${stylesMD5}.css' />
	    <property name='versions.file' value='resource/versions.properties'/>
	    <echo file='${versions.file}' append='false'/>
	    <echo file='${versions.file}' append='true'>scripts.file: js/${scriptsMD5}.js&#13;&#10;</echo>
	    <echo file='${versions.file}' append='true'>styles.file: css/${stylesMD5}.css&#13;&#10;</echo>
    </target>

    <target name='write-patches'>
	  	<property name="scripts.patch" value="resource/resources/scripts.html" />
	  	<property name="styles.patch" value="resource/resources/styles.html" />

	  	<echo file='${scripts.patch}' append='false'/>
	  	<for list='${scripts}' param='filename'>
		  	<sequential>
			  	<echo file='${scripts.patch}' append='true'>&lt;script language="javascript" type="text/javascript" src="@{filename}"/&gt;&lt;/script&gt;&#13;&#10;</echo>
		  	</sequential>
	  	</for>

	  	<echo file='${styles.patch}' append='false'/>
	  	<for list='${styles}' param='filename'>
		  	<sequential>
			  	<echo file='${styles.patch}' append='true'>&lt;link href="@{filename}" rel="stylesheet" type="text/css"/&gt;&#13;&#10;</echo>
		  	</sequential>
	  	</for>
  	</target>

    <target name="replace-static-resource-labels">

    	<property file="${basedir}/build.properties"/>
    	<property name="base.js.path" value=""/>

    	<replace file="${base.js.path}/simile/timeplot/timeplot-api.js" token="@CDF_RESOURCES_BASE_URL@" value="${cdf.resources.base.url}" />
    	<replace file="${base.js.path}/simile/timeline/timeline-api.js" token="@CDF_RESOURCES_BASE_URL@" value="${cdf.resources.base.url}" />

    </target> 
  
</project>
